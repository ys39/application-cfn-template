AWSTemplateFormatVersion: '2010-09-09'
Description:
  Create Load Balancer
Metadata:
  # Specify input parameter grouping and ordering
  "AWS::CloudFormation::Interface": 
    ParameterGroups: 
      - Label: 
          default: "Prefix"
        Parameters: 
          - Prefix
Parameters:
  Prefix:
    Description: "Prefix for resource name"
    Type: String
    Default: "dev-" # Prefix for resource name
    AllowedValues:
      - dev-
      - stg-
      - prd-
  HealthCheckIntervalSeconds:
    Type: String
    Default: "30"
  HealthCheckTimeoutSeconds:
    Type: String
    Default: "5"
  HealthyThresholdCount:
    Type: String
    Default: "5"
  UnhealthyThresholdCount:
    Type: String
    Default: "2"
  HealthCheckPath:
    Type: String
    Default: "/"
Resources:
  # Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Prefix}LoadBalancer"
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue:
            !Sub "${Prefix}PublicSubnet1" # Import Subnet ID from network stack
        - Fn::ImportValue:
            !Sub "${Prefix}PublicSubnet2" # Import Subnet ID from network stack
      SecurityGroups:
        - Fn::ImportValue:
            !Sub "${Prefix}LoadBalancerSecurityGroup" # Import Security Group ID from securitygroup stack
      Type: application
      IpAddressType: ipv4
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}LoadBalancer"
  # Load Balancer Listener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  # Application Load Balancer Target Group
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: !Ref HealthCheckIntervalSeconds
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: !Ref HealthCheckTimeoutSeconds
      HealthyThresholdCount: !Ref HealthyThresholdCount
      UnhealthyThresholdCount: !Ref UnhealthyThresholdCount
      Matcher:
        HttpCode: 200
      Name: !Sub "${Prefix}LoadBalancerTargetGroup"
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      VpcId:
        Fn::ImportValue:
          !Sub "${Prefix}VPC" # Import VPC ID from network stack
      TargetType: instance
      Targets:
        - Id:
            Fn::ImportValue:
              !Sub "${Prefix}EC2WebInstance1" # Import Instance ID from ec2 stack
          Port: 80
        - Id: 
            Fn::ImportValue:
              !Sub "${Prefix}EC2WebInstance2" # Import Instance ID from ec2 stack
          Port: 80
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}LoadBalancerTargetGroup"
Outputs:
  LoadBalancer:
    Description: "Load Balancer"
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub "${Prefix}LoadBalancer"